@{
	ViewData["Title"] = "Home Page";
}

<div class="text-center">
	<h1 class="display-4">Welcome</h1>
	<p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<ul class="emps">

</ul>
@section Scripts{
	<script>
		const ul = document.querySelector(".emps");

		const emps = [{"name":"Tom","workYears": 3, "salary":35000},
		{ "name": "Jack", "workYears": 5, "salary": 40000 },
		{ "name": "Mary", "workYears": 7, "salary": 45000 }]

		const htmlEmps = emps.map((emp) => {
			const { name, workYears, salary } = emp;
			return `<li>${name},${workYears},${salary}</li>`
		})

		ul.innerHTML = htmlEmps.join("");

		// const ul = document.querySelector(".emps");
		// // const ul2 = document.querySelectorAll('ul');
		// emps.forEach((i => {
		// 	ul.innerHTML += `<li>${i.name},${i.workYears},${i.salary}</li>`
		// }));

		// //Create Promise
		// function show(data) {
		// 	const promise = new Promise((resolve, reject) => {
		// 		setTimeout(() => {
		// 			resolve(data)
		// 		}, 1000)
		// 	});
		// 	return promise;
		// }

		// //async await 用同步的程式語法結構完成非同步的效果
		// //IIFE 立即執行
		// (async() => {
		// 	let data =  await show("A")		
		// 	console.log(data)
		// 	data = await show("B")
		// 	console.log(data)
		// 	data = await show("C")
		// 	console.log(data)
		// })();

		//using promise
		// show("A")
		// 	.then((data) => {
		// 		console.log(data)
		// 		return show("B")
		// 	})
		// 	.then((data) =>{
		// 		console.log(data)
		// 		return show("C")
		// 	})
		// 	.then((data) => {
		// 		console.log(data)
		// 	})

		//create promise物件
		// const promise = new promise((resolve, reject) => {
		// 	//非同步程式碼
		// 	const num = math.random() > 0.5 ? 1 : 0;

		// 	if (num) {
		// 		resolve("success")
		// 	} else {
		// 		reject("failed")
		// 	}
		// });

		// promise
		// 	.then((data) => {
		// 		console.log(data);
		// 	})
		// 	.catch((err) => {
		// 		console.log(err)
		// 	})
		// 	.finally(() => {
		// 		console.log("end")
		// 	})
	</script>
}
